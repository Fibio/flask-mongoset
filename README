Flask-MongoObject
Settings:
        'MONGODB_HOST' - mongo host name default = "localhost"
        'MONGODB_PORT' - mongo port, default = 27017
        'MONGODB_DATABASE' - mongo database name, default = ""
        'MONGODB_AUTOREF' - parametr to use Dbrefs for save nested objects,
                            if it is False nested objects will be saved like dictionaries,
                            else - nested objects will be saved like Dbrefs, default =  False
        'AUTOINCREMENT' - mongo parametr to use autoincrement ids in models, default =  True
        'FALLBACK_LANG' - mongo, default =  'en'


Access MongoDB from your Flask application.


    Usage:

        app = Flask(__name__)
        mongo = MongoObject(app)

    This class also provides access to mongo Model:

        class Product(mongo.Model):
            structure = t.Dict({
            'title': t.String,
            'quantity': t.Int,
            'attrs': t.Mapping(t.String, t.Or(t.Int, t.Float, t.String)),
        }).allow_extra('*')
        indexes = ['id']

    via register method:
        mongo = MongoObject(app)
        mongo.register(Product, OtherModel)

    or via decorator:
        from flaskext.mongoobject import Model

        @mongo.register
        class Product(Model):
            pass


    You can define custom query to implement some changes into returned data or add
    some new methods:

        from flaskext.mongoobject import BaseQuery, Model

        class CustomQuery(BaseQuery):

        def update(self, spec, document, upsert=False, manipulate=False,
                safe=None, multi=False, _check_keys=False, **kwargs):
            #some new functionality ...

        def all(self):
            return self.find()

        @mongo.register
        class Product(Model):
            query_class = CustomQuery


    Other usage:
        # simple find:
        Product.query.find({"title": "Name"})

        # find with translation language:
        Product.query.find({"title": "Name"}, _lang='en')

        # add data with new language:
        product = Product.query.find_one({"title": "Name"}, _lang='en')
        product._lang = 'fr'
        result.update({'title': 'Nom'})

        # create:
        Product.create({'name': 'Name', 'quantity': 1,
                                    'attrs':{'feature': 'ice', 'revision': 1}}, _lang='en')

        # create with default _lang
        Product.create({'name': 'Name', 'quantity': 1,
                                    'attrs':{'feature': 'ice', 'revision': 1}})

        # get_or_create:
        Product.query.get_or_create({'name': 'Name', 'quantity': 1,
                                    'attrs':{'feature': 'ice', 'revision': 1}}, _lang='en')

        Product.query.get_or_404("some product _id")
        Product.query.find_one_or_404(name='wrong_name')
        Product.query.find_or_404(name='wrong_name')

    The Model.query is an extension from pymongo.Collection so it supports all pymongo.Collection methods
